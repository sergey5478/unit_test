"""1)  Почему использование тестовых заглушек может быть полезным при
написании модульных тестов?
2) Какой тип тестовой заглушки следует использовать, если вам нужно
проверить, что метод был вызван с определенными аргументами?
3) Какой тип тестовой заглушки следует использовать, если вам просто
нужно вернуть определенное значение или исключение в ответ на вызов метода?
4) Какой тип тестовой заглушки вы бы использовали для имитации
взаимодействия с внешним API или базой данных?

1)Использование тестовых заглушек (mocks) полезно при написании модульных тестов,
потому что они позволяют изолировать тестируемый код от внешних зависимостей.
Это помогает проверить корректность работы конкретного модуля или функции,
не зависящей от других компонентов системы.
2)Если нужно проверить, что метод был вызван с определенными аргументами,
следует использовать "spy" (наблюдатель). Спай позволяет отследить вызов метода
и аргументы, с которыми он был вызван.
3)Если нужно вернуть определенное значение или исключение в ответ на вызов
метода без необходимости отслеживать его вызовы, следует использовать "stub"
(заглушка). Стаб возвращает предопределенные значения, когда вызывается метод.
4)Для имитации взаимодействия с внешним API или базой данных, рекомендуется
использовать "mock" (имитация). Мок предоставляет контролируемую имитацию
внешнего ресурса, что позволяет провести тестирование в изолированной
среде без реальных запросов к внешним ресурсам."""
"""У вас есть класс BookService, который использует интерфейс BookRepository 
для получения информации о книгах из базы данных. Ваша задача написать 
unit-тесты для BookService, используя Mockito для создания мок-объекта 
BookRepository."""

import unittest
from unittest.mock import Mock
from book_service import BookService


class TestBookService(unittest.TestCase):
    def test_get_book_title(self):
        mock_repository = Mock()
        mock_repository.get_book_by_id.return_value = {'id': 1, 'title': 'Sample Book'}

        book_service = BookService(mock_repository)

        title = book_service.get_book_title(1)

        mock_repository.get_book_by_id.assert_called_once_with(1)

        self.assertEqual(title, 'Sample Book')


if __name__ == '__main__':
    unittest.main()
